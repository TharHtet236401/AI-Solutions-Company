<div class="floating-contact">
    <button id="chatButton" class="chat-button">
        <i class="fas fa-comments"></i>
    </button>
    
    <div id="chatWindow" class="chat-window hidden">
        <div class="chat-header">
            <h3>AI Assistant</h3>
            <button id="closeChat">Ã—</button>
        </div>
        <div id="chatMessages" class="chat-messages"></div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type your message...">
            <button id="sendMessage">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>

<style>
.floating-contact {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
}

.chat-button {
    width: 70px;
    height: 70px;
    border-radius: 50%;
    background: #007bff;
    color: white;
    border: none;
    cursor: pointer;
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    font-size: 1.5em;
}

.chat-window {
    position: fixed;
    bottom: 90px;
    right: 20px;
    width: 400px;
    height: 500px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
}

.chat-window.hidden {
    display: none;
}

.chat-header {
    padding: 15px;
    background: #007bff;
    color: white;
    border-radius: 10px 10px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.chat-header button {
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
}

.chat-header h3 {
    font-size: 1.2em;
    margin: 0;
}

.chat-messages {
    flex-grow: 1;
    padding: 10px;
    overflow-y: auto;
}

.message {
    margin: 8px 0;
    padding: 12px 16px;
    border-radius: 15px;
    max-width: 85%;
    font-size: 1.1em;
    line-height: 1.4;
}

.user-message {
    background: #e9ecef;
    margin-left: auto;
}

.bot-message {
    background: #007bff;
    color: white;
}

.chat-input {
    padding: 15px;
    display: flex;
    gap: 12px;
    border-top: 1px solid #dee2e6;
}

.chat-input input {
    flex-grow: 1;
    padding: 12px 16px;
    border: 1px solid #dee2e6;
    border-radius: 25px;
    font-size: 1.1em;
}

.chat-input button {
    background: #007bff;
    color: white;
    border: none;
    border-radius: 50%;
    width: 45px;
    height: 45px;
    cursor: pointer;
    font-size: 1.2em;
}

.typing-indicator {
    padding: 12px 16px;
    display: flex;
    align-items: center;
    margin: 8px 0;
    max-width: 85%;
}

.typing-indicator::after {
    content: '...';
    animation: typing 1s infinite;
    font-size: 1.1em;
    color: #007bff;
}

@keyframes typing {
    0% { content: '.'; }
    33% { content: '..'; }
    66% { content: '...'; }
    100% { content: '.'; }
}

/* Responsive styles */
@media screen and (max-width: 768px) {
    .chat-window {
        position: fixed;
        bottom: 0;
        right: 0;
        width: 100%;
        height: 100%;
        border-radius: 0;
        max-height: calc(100vh - 60px); /* Account for mobile browser chrome */
    }

    .chat-header {
        border-radius: 0;
        padding: 12px;
    }

    .chat-messages {
        height: calc(100% - 120px); /* Account for header and input */
        padding: 10px;
    }

    .message {
        max-width: 90%;
        font-size: 1em;
        padding: 10px 14px;
    }

    .chat-input {
        position: sticky;
        bottom: 0;
        background: white;
        padding: 12px;
    }

    .chat-input input {
        font-size: 1em;
        padding: 10px 14px;
    }

    .chat-button {
        width: 60px;
        height: 60px;
        font-size: 1.3em;
        bottom: 15px;
        right: 15px;
    }

    /* Hide chat button when window is open */
    .chat-window:not(.hidden) + .chat-button {
        display: none;
    }

    /* Full screen overlay when chat is open */
    .chat-window:not(.hidden) {
        z-index: 9999;
    }

    .chat-header {
        position: sticky;
        top: 0;
        background: #007bff;
        z-index: 1;
    }

    /* Close button more prominent on mobile */
    .chat-header button {
        padding: 8px;
        font-size: 20px;
    }
}

/* Additional styles for very small screens */
@media screen and (max-width: 480px) {
    .message {
        max-width: 95%;
        font-size: 0.95em;
        margin: 6px 0;
    }

    .chat-input {
        padding: 10px;
    }

    .chat-button {
        width: 50px;
        height: 50px;
        font-size: 1.2em;
    }
}

/* Landscape mode adjustments */
@media screen and (max-height: 500px) and (orientation: landscape) {
    .chat-window {
        height: 100vh;
    }

    .chat-messages {
        height: calc(100% - 100px);
    }

    .chat-header {
        padding: 8px 12px;
    }

    .chat-header h3 {
        font-size: 1.1em;
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const chatButton = document.getElementById('chatButton');
    const chatWindow = document.getElementById('chatWindow');
    const closeChat = document.getElementById('closeChat');
    const messageInput = document.getElementById('messageInput');
    const sendMessage = document.getElementById('sendMessage');
    const chatMessages = document.getElementById('chatMessages');

    // Track if greeting has been shown
    let greetingShown = false;

    chatButton.addEventListener('click', () => {
        chatWindow.classList.toggle('hidden');
        
        // Show greeting only when opening for the first time
        if (!greetingShown) {
            setTimeout(() => {
                addMessage("ðŸ‘‹ Hello! I'm your AI assistant. How can I help you today?", false);
                greetingShown = true;
            }, 500); // Small delay for smooth animation
        }
    });

    closeChat.addEventListener('click', () => {
        chatWindow.classList.add('hidden');
    });

    async function sendChatMessage(message) {
        try {
            const response = await fetch('http://localhost:3000/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message })
            });

            const data = await response.json();
            return data.response;
        } catch (error) {
            console.error('Error:', error);
            return 'Sorry, I encountered an error. Please try again.';
        }
    }

    async function typeMessage(element, text) {
        const words = text.split(' ');
        for (let i = 0; i < words.length; i++) {
            element.textContent += (i > 0 ? ' ' : '') + words[i];
            await new Promise(resolve => setTimeout(resolve, 100)); // Adjust speed here
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }

    function addMessage(message, isUser = false) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message');
        messageElement.classList.add(isUser ? 'user-message' : 'bot-message');
        
        if (isUser) {
            messageElement.textContent = message;
        } else {
            // Add typing indicator
            const typingIndicator = document.createElement('div');
            typingIndicator.classList.add('typing-indicator');
            chatMessages.appendChild(typingIndicator);
            
            // Remove typing indicator and start typing message
            setTimeout(async () => {
                typingIndicator.remove();
                chatMessages.appendChild(messageElement);
                await typeMessage(messageElement, message);
            }, 500);
        }
        
        if (isUser) {
            chatMessages.appendChild(messageElement);
        }
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    async function handleMessage() {
        const message = messageInput.value.trim();
        if (!message) return;

        // Add user message
        addMessage(message, true);
        messageInput.value = '';

        // Get and add bot response
        const response = await sendChatMessage(message);
        addMessage(response);
    }

    sendMessage.addEventListener('click', handleMessage);

    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            handleMessage();
        }
    });

    // Handle mobile back button
    window.addEventListener('popstate', function() {
        if (!chatWindow.classList.contains('hidden')) {
            chatWindow.classList.add('hidden');
        }
    });

    // Push state when opening chat on mobile
    chatButton.addEventListener('click', () => {
        if (window.innerWidth <= 768 && chatWindow.classList.contains('hidden')) {
            history.pushState({ chat: 'open' }, '');
        }
    });
});
</script> 